{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleTextChange","e","setState","target","value","handleCheckboxChange","handleDateChange","handleClick","length","props","click","alert","maxDate","Number","this","Fragment","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","task","active","finishDate","important","style","color","change","delete","finishTime","toLocaleString","TaskList","tasks","filter","done","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","App","toLocaleDateString","deleteTask","index","findIndex","splice","changeTaskStatus","Array","from","forEach","getTime","addTask","counter","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7498606.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './AddTask.css'\n\nclass AddTask extends Component {\n    minDate = new Date().toISOString().slice(0, 10)\n\n    state = {\n        text: '',\n        checked: false,\n        date: this.minDate\n    }\n\n    handleTextChange = (e) => {\n        this.setState({\n            text: e.target.value\n        })\n    }\n\n    handleCheckboxChange = (e) => {\n        this.setState({\n            checked: e.target.checked\n        })\n    }\n\n    handleDateChange = (e) => {\n        this.setState({\n            date: e.target.value\n        })\n    }\n\n    handleClick = () => {\n        const { text, date, checked } = this.state\n\n        if (text.length > 2) {\n            const click = this.props.click(text, date, checked)\n\n            if (click) {\n                this.setState({\n                    text: '',\n                    checked: false,\n                    date: this.minDate\n                })\n            }\n        } else {\n            alert('Task name is to short!!!')\n        }\n    }\n\n    render() {\n        let maxDate = Number(this.minDate.slice(0, 4)) + 1\n        maxDate = maxDate + '-12-31'\n\n        return (\n           <React.Fragment>\n            <div className='form'>\n            <div className=\"row d-flex justify-content-center\">\n            <div className=\"form-group\">\n                <input \n                type=\"text\" \n                placeholder=\"Add task..\" \n                value={this.state.text} \n                onChange={this.handleTextChange}\n                className=\"form-control\" />\n            </div>\n            <div className=\"form-check\">\n                <input \n                type=\"checkbox\" \n                checked={this.state.checked} \n                id=\"important\" \n                onChange={this.handleCheckboxChange} \n                className=\"form-check-input\"\n                /> \n                <label htmlFor=\"important\" className=\"form-check-label\">Priority</label>\n            </div>\n            </div>\n            <div className=\"row d-flex\">\n            <div className=\"form-group date-label\">\n                <label htmlFor=\"date\">Due date: </label>\n            </div>\n            <div className=\"form-group date-input\">\n                <input \n                type=\"date\" \n                id=\"date\" \n                value={this.state.date} \n                min={this.minDate} \n                max={maxDate} \n                onChange={this.handleDateChange}\n                className=\"form-control\" />\n            </div>\n            </div>\n            <div className=\"row d-flex justify-content-center\">\n                <button onClick={this.handleClick} type=\"submit\" className=\"btn btn-primary\">ADD</button>\n            </div>\n                <hr />\n            </div>\n            </React.Fragment>\n        );\n    }\n}\n \nexport default AddTask;","import React from 'react';\n\nconst Task = (props) => {\n    const { text, date, id, active, finishDate, important } = props.task\n\n    const style = {\n        color: 'red'\n    }\n\n    if (active) {\n        return (\n            <div>\n                <p>\n                    <strong style={important ? style : null}>{text}</strong> - to <span>{date} </span>\n                    <button className=\"btn btn-success\" onClick={() => props.change(id)}>Done</button>\n                    <button className=\"btn btn-danger\" onClick={() => props.delete(id)}>X</button>\n                </p>\n            </div>\n        );\n    } else {\n        const finishTime = new Date(finishDate).toLocaleString()\n\n        return (\n            <div>\n                <p>\n                    <strong>{text}</strong><em>(make to {date}) </em><br />\n                    - confirmation of performance <span>{finishTime} </span>\n                    <button className=\"btn btn-danger\" onClick={() => props.delete(id)}>X</button>\n                </p>\n            </div>\n        )\n    }\n}\n \nexport default Task;","import React from 'react';\nimport Task from './Task';\nimport './TaskList.css'\n\nconst TaskList = (props) => {\n    const active = props.tasks.filter(task => task.active === true)\n    const done = props.tasks.filter(task => task.active === false)\n\n    done.sort((a, b) => {\n        return b.finishDate - a.finishDate\n    })\n\n    active.sort((a, b) => {\n        a = a.text.toLowerCase()\n        b = b.text.toLowerCase()\n\n        if (a.text < b.text) return -1\n        if (a.text > b.text) return 1\n        return 0\n    })\n\n    const activeTasks = active.map(task => (\n        <Task key={task.id} task={task} delete={props.delete} change={props.change} />\n    ))\n\n    const doneTasks = done.map(task => (\n        <Task key={task.id} task={task} delete={props.delete} change={props.change} />\n    ))\n\n    return (\n        <div>\n            <div className=\"active\">\n                <h2 className=\"task-title\">Tasks to be done</h2>\n                {activeTasks.length > 0 ? activeTasks : <p>No tasks to be done</p>}\n            </div>\n            <hr />\n            <div className=\"done\">\n                <h3 className=\"task-title\">Finished tasks <em>({done.length})</em></h3>\n                {done.length > 5 && <span>Only the last 5 items are displayed</span>}\n                {doneTasks.slice(0, 5)}\n            </div>\n        </div>\n    );\n}\n\nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\n\nclass App extends Component {\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: 'Finally play The Witcher 3',\n        date: new Date().toLocaleDateString(),\n        important: true,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 1,\n        text: 'Do the laundry',\n        date: new Date().toLocaleDateString(),\n        important: false,\n        active: true,\n        finishDate: null\n      }\n    ]\n  }\n\n  deleteTask = (id) => {\n    const tasks = [...this.state.tasks]\n    const index = tasks.findIndex(task => task.id === id)\n    tasks.splice(index, 1)\n\n    this.setState({ tasks })\n  }\n\n  changeTaskStatus = (id) => {\n    const tasks = Array.from(this.state.tasks)\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false\n        task.finishDate = new Date().getTime()\n      }\n    })\n\n    this.setState({ tasks })\n  }\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text: text,\n      date: date,\n      important: important,\n      active: true,\n      finishDate: null\n    }\n    this.counter++\n\n    const tasks = [...this.state.tasks]\n    tasks.push(task)\n    this.setState({ tasks })\n\n    return true\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n      <div className=\"row d-flex justify-content-center\">\n          <div className=\"col-md-6\">\n            <h1 className=\"title\">To-Do Application</h1>\n            <AddTask click={this.addTask} />\n            <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} />\n          </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}